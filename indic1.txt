//@version=5
indicator("–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä Aroon [DaVinchi] v6.3", max_bars_back = 500, format = format.percent, max_labels_count = 500)
var line[] lines = array.new_line()
int max_lines = 500  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π

//###############################################################################################################
//###############################################################################################################
//###############################################################################################################
// --------------------------------------------------------------------------------------------------------------------
// ùôêùôéùôÄùôç ùôÑùôâùôãùôêùôèùôé
// --------------------------------------------------------------------------------------------------------------------
int  length_trend     = input.int(15, title="length_trend") // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª–∏–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
bool show_levl  = input.bool(false, "Trend Levels") // –§–ª–∞–∂–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–¥–∞

// –¶–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–¥–∞
color color_up = input.color(#1eff00, "–í–≤–µ—Ä—Ö", group = "–¶–≤–µ—Ç")
color color_dn = input.color(#1100ff, "–í–Ω–∏–∑", group = "–¶–≤–µ—Ç")
color color_up1 = input.color(#c8ff00, "–°–º–∞—Ä—Ç –ú–∞–Ω–∏ Up", group = "–¶–≤–µ—Ç")
color color_dn1 = input.color(#da00ff, "–°–º–∞—Ä—Ç –ú–∞–Ω–∏ Dn", group = "–¶–≤–µ—Ç")
color color_up2 = input.color(#00f7ff, "–¢—Ä–µ–Ω–¥–æ–≤—ã–π Up", group = "–¶–≤–µ—Ç")
color color_dn2 = input.color(#ff0000, "–¢—Ä–µ–Ω–¥–æ–≤—ã–π Dn", group = "–¶–≤–µ—Ç")

color up = input.color(#c8ff00, "+", group = "Colors", inline = "i") // –¶–≤–µ—Ç –¥–ª—è –±—ã—á—å–∏—Ö —É—Ä–æ–≤–Ω–µ–π
color dn = input.color(#da00ff, "-", group = "Colors", inline = "i") // –¶–≤–µ—Ç –¥–ª—è –º–µ–¥–≤–µ–∂—å–∏—Ö —É—Ä–æ–≤–Ω–µ–π

var box1         = box(na) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (—É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–¥–∞)
series float atr = ta.atr(200) // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (ATR) —Å –¥–ª–∏–Ω–æ–π 200 –¥–ª—è —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–¥–∞
bool m_rev_sig = input.bool(true, "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç", group = "–°–∏–≥–Ω–∞–ª—ã")
bool trend_sig = input.bool(true, "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Ç—Ä–µ–Ω–¥", group = "–°–∏–≥–Ω–∞–ª—ã")
// --------------------------------------------------------------------------------------------------------------------                         #
// ùôÑùôâùòøùôÑùòæùòºùôèùôäùôç ùòæùòºùôáùòæùôêùôáùòºùôèùôÑùôäùôâùôé                                                                                                                     #
// --------------------------------------------------------------------------------------------------------------------                         #
series float emaValue   = ta.ema(close, length_trend) // EMA –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è                                                            #
series float correction = close + (close - emaValue) // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Zero-Lag                                                      #
series float zlma       = ta.ema(correction, length_trend) // Zero-Lag Moving Average (ZLMA)                                                    #
bool  signalUp          = ta.crossover(zlma, emaValue) // –°–∏–≥–Ω–∞–ª –Ω–∞ –±—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä ZLMA –∏ EMA                                                  #
bool  signalDn          = ta.crossunder(zlma, emaValue) // –°–∏–≥–Ω–∞–ª –Ω–∞ –º–µ–¥–≤–µ–∂–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä ZLMA –∏ EMA                                              #
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ ZLMA –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è                                                                                          #
color zlma_color        = zlma > zlma[3] ? up : zlma < zlma[3] ? dn : na // –¶–≤–µ—Ç ZLMA –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –≤—ã—à–µ –æ–Ω –∏–ª–∏ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è 3 –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥    #
color ema_col           = emaValue < zlma ? up : dn // –¶–≤–µ—Ç EMA –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ZLMA                                          #

// --------------------------------------------------------------------------------------------------------------------
// ùôëùôÑùôéùôêùòºùôáùôÑùôïùòºùôèùôÑùôäùôâ
// --------------------------------------------------------------------------------------------------------------------

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Zero-Lag Moving Average (ZLMA) –∏ EMA
p1 = plot(zlma, color = zlma_color, linewidth = 1) // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ZLMA —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
p2 = plot(emaValue, color = ema_col, linewidth = 1) // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ EMA —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫ ZLMA
fill(p1, p2, zlma, emaValue, color.new(zlma_color, 80), color.new(ema_col, 80)) // –ó–∞–ª–∏–≤–∫–∞ –º–µ–∂–¥—É ZLMA –∏ EMA —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é

// –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
method draw_box(color col, top, bot, price)=>
    box.new(
             bar_index, top, bar_index, bot, col, 1,
             bgcolor         = color.new(col, 90), // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
             text            = str.tostring(math.round(price, 2)), // –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
             text_size       = size.tiny, // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
             text_color      = chart.fg_color, // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
             text_halign     = text.align_right // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–ø—Ä–∞–≤–æ
             )

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
if show_levl // –ï—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –≤–∫–ª—é—á–µ–Ω–æ
    bool check_signals = signalUp or signalDn // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±—ã—á—å–µ–≥–æ –∏–ª–∏ –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

    switch
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –±—ã—á—å–µ–º —Å–∏–≥–Ω–∞–ª–µ
        signalUp => box1 := up.draw_box(zlma, zlma - atr, close) // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∏–∂–µ ZLMA –Ω–∞ —É—Ä–æ–≤–Ω–µ ATR
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –º–µ–¥–≤–µ–∂—å–µ–º —Å–∏–≥–Ω–∞–ª–µ
        signalDn => box1 := dn.draw_box(zlma + atr, zlma, close) // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤—ã—à–µ ZLMA –Ω–∞ —É—Ä–æ–≤–Ω–µ ATR
    switch
        // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤–ø—Ä–∞–≤–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        not signalUp or not signalDn => box1.set_right(bar_index + 6)
        => box1 := box(na) // –°–±—Ä–æ—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ


// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–∏–≥—É—Ä –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑
// For bullish (up) signal
plotshape(signalUp and trend_sig and (zlma_color == up and ema_col == up) ? zlma : na,
          "", shape.diamond, location.absolute, color = up, size = size.normal)

// For bearish (down) signal
plotshape(signalDn and trend_sig and (zlma_color == dn and ema_col == dn) ? zlma : na,
          "", shape.diamond, location.absolute, color = dn, size = size.normal)

//###############################################################################################################
//###############################################################################################################
//###############################################################################################################

// –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
int length = input.int(29, "–î–ª–∏–Ω–∞ –ê—Ä—É–Ω")
int smooth = input.int(10, "–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ")
int sign_len = input.int(5, "–°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è")
int gain_limit = 10

// –í—ã—á–∏—Å–ª–µ–Ω–∏—è
zero_lag(src, length, gain_limit) =>
    float alpha = 2 / (length + 1)
    float ema = na
    float ec = na
    float least_error = 1000000
    float best_gain = 0

    ema := na(ema[1]) ? src : alpha * src + (1 - alpha) * nz(ema[1])

    for int value = -gain_limit to gain_limit
        float gain = value / 10
        float ec_temp = na(ec[1]) ? src : nz(ec[1])
        ec_temp := alpha * (ema + gain * (src - ec_temp)) + (1 - alpha) * ec_temp

        float error = src - ec_temp
        if math.abs(error) < least_error
            least_error := math.abs(error)
            best_gain := gain

    ec := na(ec[1]) ? src : alpha * (ema + best_gain * (src - nz(ec[1]))) + (1 - alpha) * nz(ec[1])
    ec

aroon(len, smooth) =>
    float aroonUp = 100 * (ta.highestbars(high, len ) + len) / len
    float aroonDown = 100 * (ta.lowestbars(low, len ) + len) / len
    float src = aroonUp - aroonDown
    zero_lag(src, smooth, gain_limit)

float aroon_osc = aroon(length, smooth)
float sig_line = ta.sma(aroon_osc, sign_len)

color color_sig = color.new(chart.fg_color, 85)

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
p3 = plot(aroon_osc, "–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä –ê—Ä—É–Ω", color = color.from_gradient(aroon_osc, -80, 80, color_dn, color_up))
p4 = plot(0, "–ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è", color = color.new(chart.fg_color, 50))

plot(sig_line, "–°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è", color = bar_index % 2 == 0 ? color.new(chart.fg_color, 50) : na)

fill(p3, p4, 0, -100, na, color_dn)
fill(p3, p4, 100, 0, color_up, na)

bgcolor(ta.crossover(aroon_osc, 0) ? color.new(color_up, 85) : na)
bgcolor(ta.crossover(aroon_osc, 0) and trend_sig ? color.new(color_up, 85) : na, force_overlay = true)
bgcolor(ta.crossunder(aroon_osc, 0) ? color.new(color_dn, 85) : na)
bgcolor(ta.crossunder(aroon_osc, 0) and trend_sig ? color.new(color_dn, 85) : na, force_overlay = true)

// –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Ç—Ä–µ–Ω–¥
if (ta.crossover(aroon_osc, 0) and trend_sig and (zlma_color == up and ema_col == up))
    label.new(bar_index, low, "ü¢Å\n\n–õ–æ–Ω–≥\n\n",
              color = color(na),
              textcolor = color_up,
              style = label.style_label_up,
              force_overlay = true)

if (ta.crossunder(aroon_osc, 0) and trend_sig and (zlma_color == dn and ema_col == dn))
    label.new(bar_index, high, "\n\n–®–æ—Ä—Ç\n\nü¢É",
              color = color(na),
              textcolor = color_dn,
              style = label.style_label_down,
              force_overlay = true)

// –£—Å–ª–æ–≤–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç
if aroon_osc > 0 and ta.crossover(aroon_osc, sig_line) and m_rev_sig and trend_sig and (zlma_color == up and ema_col == up)
    label.new(bar_index, low, "ü¢Å\n–õ–æ–Ω–≥\n",
              color = color(na),
              textcolor = color.new(color_up2, 50),
              style = label.style_label_up,
              force_overlay = true)

if aroon_osc < 0 and ta.crossunder(aroon_osc, sig_line) and m_rev_sig and trend_sig and (zlma_color == dn and ema_col == dn)
    label.new(bar_index, high, "\n–®–æ—Ä—Ç\nü¢É",
              color = color(na),
              textcolor = color_dn2,
              style = label.style_label_down,
              force_overlay = true)

// –°–∏–≥–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç
plotchar(ta.crossover(aroon_osc, sig_line) ? aroon_osc[0] : na, "–†–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö", "‚ò≠",
             location = location.absolute,
             color = color_up2,
             size = size.small,
             offset = 0)

plotchar(ta.crossunder(aroon_osc, sig_line) ? aroon_osc[0] : na, "–†–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑", "‚ò≠",
             location = location.absolute,
             color = color_dn2,
             size = size.small,
             offset = 0)

// –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –Ω—É–ª–µ–≤–æ–π –ª–∏–Ω–∏–∏
plotchar(ta.crossover(aroon_osc, 0) ? 0 : na, "–õ–æ–Ω–≥", "‚ùå",
 location = location.absolute,
 color = color_up,
 size = size.tiny,
 offset = 0)
plotchar(ta.crossunder(aroon_osc, 0) ? 0 : na, "–®–æ—Ä—Ç", "‚ùå",
 location = location.absolute,
 color = color_dn,
 size = size.tiny,offset = 0)

bgcolor(aroon_osc > 0 ? color.new(color_up, 95) : color.new(color_dn, 95))

if barstate.islast
    label.delete(
         label.new(bar_index, aroon_osc, str.tostring(math.round(aroon_osc), format.percent),
                 color = color(na),
                 textcolor = aroon_osc > 0 ? color_up : color_dn,
                 style = label.style_label_left)[1]
                 )



// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
bool long_signal_cross = ta.crossover(aroon_osc, sig_line) and aroon_osc > 0 and not (ta.crossover(aroon_osc[1], sig_line[1]) and aroon_osc[1] > 0)
bool short_signal_cross = ta.crossunder(aroon_osc, sig_line) and aroon_osc < 0 and not (ta.crossunder(aroon_osc[1], sig_line[1]) and aroon_osc[1] < 0)
bool long_graphic_signal_cross = ta.crossover(aroon_osc, 0) and trend_sig and (zlma_color == up and ema_col == up) and not (ta.crossover(aroon_osc[1], 0) and trend_sig[1] and (zlma_color[1] == up and ema_col[1] == up))
bool short_graphic_signal_cross = ta.crossunder(aroon_osc, 0) and trend_sig and (zlma_color == dn and ema_col == dn) and not (ta.crossunder(aroon_osc[1], 0) and trend_sig[1] and (zlma_color[1] == dn and ema_col[1] == dn))

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
if (signalUp and trend_sig and (zlma_color == up and ema_col == up))
    label.new(bar_index, low, "ü¢Å\n\n–õ–æ–Ω–≥\n\n",
              color = color(na),
              textcolor = color_up1,
              style = label.style_label_up,
              force_overlay = true)

if (signalDn and trend_sig and (zlma_color == dn and ema_col == dn))
    label.new(bar_index, high, "\n\n–®–æ—Ä—Ç\n\nü¢É",
              color = color(na),
              textcolor = color_dn1,
              style = label.style_label_down,
              force_overlay = true)

// –ê–ª–µ—Ä—Ç—ã –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
alertcondition(signalUp and trend_sig and (zlma_color == up and ema_col == up), "ü¢Å –õ–æ–Ω–≥ –°–∏–≥–Ω–∞–ª",'{\n"name": "üü¢Long_TradingViewüü¢",  \n"secret": "opsx85yas3",  \n"side": "buy",  \n"symbol": "{{ticker}}"\n}')
alertcondition(signalDn and trend_sig and (zlma_color == dn and ema_col == dn), "ü¢É –®–æ—Ä—Ç –°–∏–≥–Ω–∞–ª",'{\n"name": "üî¥Short_TradingViewüî¥", \n"secret": "ydw64uwqtwr", \n"side": "sell", \n"symbol": "{{ticker}}"\n}')
alertcondition(aroon_osc > 0 and ta.crossover(aroon_osc, sig_line) and m_rev_sig and trend_sig and (zlma_color == up and ema_col == up), "‚ò≠ –õ–æ–Ω–≥ –†–∞–∑–≤–æ—Ä–æ—Ç", '{\n"name": "üü¢Long_TradingViewüü¢", \n"secret": "opsx85yas3", \n"side": "buy", \n"symbol": "{{ticker}}"\n}')
alertcondition(aroon_osc < 0 and ta.crossunder(aroon_osc, sig_line) and m_rev_sig and trend_sig and (zlma_color == dn and ema_col == dn), "‚ò≠ –®–æ—Ä—Ç –†–∞–∑–≤–æ—Ä–æ—Ç", '{\n"name": "üî¥Short_TradingViewüî¥", \n"secret": "ydw64uwqtwr", \n"side": "sell", \n"symbol": "{{ticker}}"\n}')
alertcondition(ta.crossover(aroon_osc, 0) and trend_sig and (zlma_color == up and ema_col == up), "‚ùå Long (–ì—Ä–∞—Ñ–∏–∫)", '{\n"name": "üü¢Long_TradingViewüü¢",  \n"secret": "opsx85yas3",  \n"side": "buy",  \n"symbol": "{{ticker}}"\n}')
alertcondition(ta.crossunder(aroon_osc, 0) and trend_sig and (zlma_color == dn and ema_col == dn), "‚ùå Short (–ì—Ä–∞—Ñ–∏–∫)", '{\n"name": "üî¥Short_TradingViewüî¥", \n"secret": "ydw64uwqtwr", \n"side": "sell", \n"symbol": "{{ticker}}"\n}')